@using HomeOrganizer.Components
@using HomeOrganizer.Components.Features
@using HomeOrganizer.Models.Features;
@using HomeOrganizer.Models.User;

@implements IDisposable

@inject UserService userService

@page "/"

<PageTitle> Home Organizer </PageTitle>

@if (User == null)
{
    <MudContainer Class="content px-4" Style="height:90%" MaxWidth="MaxWidth.Large">
        @* // Very bad way to do this -> needs better solution!!!
    // Maybe create component -> login panel? *@
        <MudGrid Justify="Justify.Center" Class="align-content-center" Style="height:100%">
            <MudItem>
                <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8" Height="180px" Width="300px">
                    <MudText Align="Align.Center" Typo="Typo.body1">
                        Welcome on Home Organizer,
                        register account to use our application!
                    </MudText>
                    <MudButton OnClick="LoginUser" EndIcon="@Icons.Material.Filled.Login" IconColor="Color.Success" Variant="Variant.Outlined">
                        LOGIN
                    </MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudContainer>
}
else
{
    if (OpenedFeature == null)
    {
        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            <MudGrid>

                @foreach (var feature in User.Features.OrderBy(f => f.TileData.Position))
                {
                    if (feature == null || !feature.FeatureData.IsUsed) continue;
                    <FeatureTile Feature="@feature" OnRemoveFeature="HandleRemoveFeature" OnOpenFeature="HandleOpenFeature" />
                }

            </MudGrid>
            <MudGrid Justify="Justify.Center" Style="margin-top: auto;">
                <AddFeatureTile UserData="User" />
            </MudGrid>
        </MudContainer>
    }
    else
    {
        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            @switch (OpenedFeature.FeatureData.Name)
            {
                case "Media subscriptions":
                    <MediaSubscriptionsPanel MediaSubscriptions="(OpenedFeature as MediaSubscriptions)" />
                    break;

                default:
                    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Elevation="0">
                        <MudPaper Width="500px" Height="200px" Class="pa-4 mt-16">
                            <MudText Typo="Typo.h6">
                                Whoops... Something went really really wrong!
                            </MudText>
                            <MudText Typo="Typo.body1" Class="mt-3">
                                Cannot find feature '@OpenedFeature.FeatureData.Name', maybe it is under production?
                            </MudText>
                            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-10" Elevation="0">

                                <MudButton OnClick="((e)=>{OpenedFeature = null;})" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.KeyboardBackspace">
                                    Back home
                                </MudButton>
                            </MudPaper>
                        </MudPaper>
                    </MudPaper>

                    break;
            }
        </MudContainer>
    }
}

@code {
    bool autoLoginAdming = false;
    protected UserData User { get; set; }
    protected IFeature OpenedFeature { get; set; }

    private void HandleRemoveFeature(IFeature feature)
    {
        User.RemoveFeature(feature);
        StateHasChanged();
    }

    private void HandleOpenFeature(IFeature feature)
    {
        OpenedFeature = feature;
    }

    private async void HandleUserUpdate()
    {
        User = userService.LoggedUser;
        if (User != null)
        {
            OpenedFeature = User.OpenedFeature;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }

    private void LoginUser()
    {
        User = UserData.CreateAdmin();
        userService.LoggedUser = User;
    }

    protected override void OnInitialized()
    {
        User = userService.LoggedUser;
        userService.OnChange += HandleUserUpdate;

        if (autoLoginAdming && User == null) LoginUser();
        base.OnInitialized();
    }
}