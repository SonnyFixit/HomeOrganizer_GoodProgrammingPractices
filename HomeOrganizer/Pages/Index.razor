@using HomeOrganizer.Components
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Components.Features;
@using HomeOrganizer.Models.Features;
@using HomeOrganizer.Models.User;
@using MudBlazor.Services;
@using MyWebsiteBlazor.Data.Database;

@implements IDisposable

@inject UserService userService
@inject IDialogService DialogService

@page "/"

<PageTitle> Home Organizer </PageTitle>

@if (User == null)
{
    <MudContainer Class="content px-4" Style="height:90%" MaxWidth="MaxWidth.Large">

        <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Style="margin-top:15%" Elevation="0">
            <MudPaper Width="300px" Class="pa-4">
                <MudText Typo="Typo.h6" Align="Align.Center">
                    Home Organizer
                </MudText>
                <MudText Typo="Typo.body1" Class="mt-3" Align="Align.Center">
                    Login or register account to use our application!
                </MudText>
                <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-3" Elevation="0">
                    <MudStack>

                        <MudTextField @bind-Value="userLogin"
                                      For="@(() => userLogin)"
                                      Immediate="true"
                                      Label="Login"
                                      Class="pt-3"
                                      Placeholder="Provide login" />
                        <MudButton Class="pt-1" OnClick="LoginUser" EndIcon="@Icons.Material.Filled.Login" IconColor="Color.Success" Variant="Variant.Outlined">
                            Login
                        </MudButton>
                        <MudDivider Class="my-10" />
                        <MudButton OnClick="RegisterUser" EndIcon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Success" Variant="Variant.Outlined">
                            Register
                        </MudButton>
                    </MudStack>

                </MudPaper>
            </MudPaper>
        </MudPaper>

    </MudContainer>
}
else
{
    if (User.OpenedFeature == null)
    {
        @*         <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            <MudGrid>

                @foreach (var feature in User.Features.OrderBy(f => f.TileData.Position))
                {
                    if (feature == null || !feature.FeatureData.IsUsed) continue;
                    <FeatureTile Feature="@feature" OnRemoveFeature="HandleRemoveFeature" OnOpenFeature="HandleOpenFeature" />
                }

            </MudGrid>
            <MudGrid Justify="Justify.Center" Style="margin-top: auto;">
                <AddFeatureTile UserData="User" />
            </MudGrid>
        </MudContainer> *@

        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            <MudGrid>

                @foreach (var feature in User.Features.OrderBy(f => f.TileData.Position))
                {
                    if (feature == null || !feature.FeatureData.IsUsed) continue;
                    <FeatureTile Feature="@feature" OnRemoveFeature="HandleRemoveFeature" OnOpenFeature="HandleOpenFeature" />
                }

            </MudGrid>
            <MudGrid Justify="Justify.Center" Style="margin-top: auto;">
                <AddFeatureTile UserData="User" />
            </MudGrid>
        </MudContainer>
    }
    else
    {
        @* It need improvements? *@
        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            @switch (User.OpenedFeature.FeatureData.Name)
            {
                case "Media subscriptions":
                    <MediaSubscriptionsPanel MediaSubscriptions="(User.OpenedFeature as MediaSubscriptions)" />
                    break;

                case "Introduction":
                    <IntroductionPanel Introduction="(User.OpenedFeature as Introduction)" />
                    break;

                default:
                    @* <NoFeatureError/> *@
                    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Elevation="0">
                        <MudPaper Width="500px" Height="200px" Class="pa-4 mt-16">
                            <MudText Typo="Typo.h6">
                                Whoops... Something went really really wrong!
                            </MudText>
                            <MudText Typo="Typo.body1" Class="mt-3">
                                Cannot find feature '@User.OpenedFeature.FeatureData.Name', maybe it is under production?
                            </MudText>
                            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-10" Elevation="0">

                                <MudButton OnClick="((e)=>{User.OpenedFeature = null;})" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.KeyboardBackspace">
                                    Back home
                                </MudButton>
                            </MudPaper>
                        </MudPaper>
                    </MudPaper>
                    break;
            }
        </MudContainer>
    }
}

@code {
    private string userLogin = string.Empty;

    bool autoLoginAdming = false;
    protected UserData? User { get; set; }
    protected FeatureBase? DraggedFeature { get; set; }

    private void HandleRemoveFeature(FeatureBase feature)
    {
        User.RemoveFeature(feature);
        StateHasChanged();
    }

    private void HandleOpenFeature(FeatureBase feature)
    {
        User.OpenedFeature = feature;
    }

    private async void HandleUserUpdate()
    {
        User = userService.LoggedUser;
        StateHasChanged();
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }

    private async Task LoginUser()
    {
        UserData? registeredUser = await DatabaseHandlerMongoDB.GetUser(userLogin);
        if (registeredUser == null)
        {
            Console.WriteLine("HANDLE NON REGISTERED USER");
            return;
        }

        User = registeredUser;
        userService.LoggedUser = registeredUser;
    }

    private async Task RegisterUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = await DialogService.ShowAsync<RegisterUserDialog>("Registration", options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not UserData registeredUser) return;

        await DatabaseHandlerMongoDB.CreateUser(registeredUser);
        User = registeredUser;
        userService.LoggedUser = registeredUser;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        User = userService.LoggedUser;
        userService.OnChange += HandleUserUpdate;

        if (autoLoginAdming && User == null) LoginUser();
        base.OnInitialized();
    }


    // TODO: DRAG AND DROP MUDBLAZOR
    // FROM: https://mudblazor.com/components/dropzone#mics-chess-board
    // int columns = 4;
    // [Inject] IBreakpointService BreakpointListener { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await BreakpointListener.Subscribe(breakpoint =>
    //         {
    //             switch (breakpoint)
    //             {
    //                 case Breakpoint.Xs:
    //                     columns = 1;
    //                     break;
    //                 case Breakpoint.Sm:
    //                     columns = 2;
    //                     break;
    //                 case Breakpoint.Md:
    //                     _dateTime = DateTime.Now.AddDays(3);
    //                     break;
    //                 case Breakpoint.Lg:
    //                     _dateTime = DateTime.Now.AddDays(4);
    //                     break;
    //                 case Breakpoint.Xl:
    //                     _dateTime = DateTime.Now.AddDays(5);
    //                     break;
    //                 case Breakpoint.Xxl:
    //                     _dateTime = DateTime.Now.AddDays(6);
    //                     break;
    //                 case Breakpoint.SmAndDown:
    //                     _dateTime = DateTime.Now.AddDays(7);
    //                     break;
    //                 case Breakpoint.MdAndDown:
    //                     _dateTime = DateTime.Now.AddDays(8);
    //                     break;
    //                 case Breakpoint.LgAndDown:
    //                     _dateTime = DateTime.Now.AddDays(9);
    //                     break;
    //                 case Breakpoint.XlAndDown:
    //                     _dateTime = DateTime.Now.AddDays(10);
    //                     break;
    //                 case Breakpoint.SmAndUp:
    //                     _dateTime = DateTime.Now.AddDays(11);
    //                     break;
    //                 case Breakpoint.MdAndUp:
    //                     _dateTime = DateTime.Now.AddDays(12);
    //                     break;
    //                 case Breakpoint.LgAndUp:
    //                     _dateTime = DateTime.Now.AddDays(13);
    //                     break;
    //                 case Breakpoint.XlAndUp:
    //                     _dateTime = DateTime.Now.AddDays(14);
    //                     break;
    //                 case Breakpoint.None:
    //                     _dateTime = DateTime.Now.AddDays(15);
    //                     break;
    //                 case Breakpoint.Always:
    //                     _dateTime = DateTime.Now.AddDays(16);
    //                     break;
    //             }
    //             InvokeAsync(StateHasChanged);
    //         });

    //         StateHasChanged();
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }
}