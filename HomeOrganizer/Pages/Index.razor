@using HomeOrganizer.Common;
@using HomeOrganizer.Components
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Components.Errors
@using HomeOrganizer.Components.Features;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.Features;
@using HomeOrganizer.Models.User;
@using MudBlazor.Services;
@using MyWebsiteBlazor.Data.Database;
@using System.Reflection;

@implements IDisposable

@inject UserService userService
@inject IDialogService DialogService

@page "/"

<PageTitle> Home Organizer </PageTitle>

@if (User == null)
{
    <WelcomeLoginRegister />
}
else
{
    if (User.OpenedFeature == null)
    {
        @*         <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            <MudGrid>

                @foreach (var feature in User.Features.OrderBy(f => f.TileData.Position))
                {
                    if (feature == null || !feature.FeatureData.IsUsed) continue;
                    <FeatureTile Feature="@feature" OnRemoveFeature="HandleRemoveFeature" OnOpenFeature="HandleOpenFeature" />
                }

            </MudGrid>
            <MudGrid Justify="Justify.Center" Style="margin-top: auto;">
                <AddFeatureTile UserData="User" />
            </MudGrid>
        </MudContainer> *@

        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">
            <MudGrid>

                @foreach (var feature in User.Features.OrderBy(f => f.TileData.Position))
                {
                    if (feature == null || !feature.FeatureData.IsUsed) continue;
                    <FeatureTile IsDarkMode="@User.UseDarkTheme" Feature="@feature" OnRemoveFeature="HandleRemoveFeature" OnOpenFeature="HandleOpenFeature" />
                }

            </MudGrid>
            <MudGrid Justify="Justify.Center" Style="margin-top: auto;">
                <AddFeatureTile UserData="User" />
            </MudGrid>
        </MudContainer>
    }
    else
    {
        <MudContainer Class="content pt-4" MaxWidth="MaxWidth.ExtraLarge" Style="height: 90%; display: flex; flex-direction: column;">

            @if (selectedType == null)
            {
                <NoFeatureError />
            }
            else
            {
                <DynamicComponent Type="@selectedType" Parameters="@parameters" />
            }

        </MudContainer>
    }
}

@code {
    bool autoLoginAdming = false;
    protected UserData? User { get; set; }
    protected FeatureBase? DraggedFeature { get; set; }

    private Type? selectedType = null;
    private Dictionary<string, object>? parameters = new Dictionary<string, object>();

    private void HandleRemoveFeature(FeatureBase feature)
    {
        User.RemoveFeature(feature);
        StateHasChanged();
    }

    private void HandleOpenFeature(FeatureBase feature)
    {
        User.OpenedFeature = feature;
        selectedType = Common.PanelManager.GetPanelType(User.OpenedFeature);
        parameters = new Dictionary<string, object>()
        {
            {"FeatureBase", User.OpenedFeature}
        };
    }

    private async void HandleUserUpdate()
    {
        User = userService.LoggedUser;
        if (User != null && User.OpenedFeature == null)
        {
            selectedType = null;
            parameters = null;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }

    protected override void OnInitialized()
    {
        userService.OnChange += HandleUserUpdate;
        User = userService.LoggedUser;
        base.OnInitialized();
    }


    // TODO: DRAG AND DROP MUDBLAZOR
    // FROM: https://mudblazor.com/components/dropzone#mics-chess-board
    // int columns = 4;
    // [Inject] IBreakpointService BreakpointListener { get; set; }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await BreakpointListener.Subscribe(breakpoint =>
    //         {
    //             switch (breakpoint)
    //             {
    //                 case Breakpoint.Xs:
    //                     columns = 1;
    //                     break;
    //                 case Breakpoint.Sm:
    //                     columns = 2;
    //                     break;
    //                 case Breakpoint.Md:
    //                     _dateTime = DateTime.Now.AddDays(3);
    //                     break;
    //                 case Breakpoint.Lg:
    //                     _dateTime = DateTime.Now.AddDays(4);
    //                     break;
    //                 case Breakpoint.Xl:
    //                     _dateTime = DateTime.Now.AddDays(5);
    //                     break;
    //                 case Breakpoint.Xxl:
    //                     _dateTime = DateTime.Now.AddDays(6);
    //                     break;
    //                 case Breakpoint.SmAndDown:
    //                     _dateTime = DateTime.Now.AddDays(7);
    //                     break;
    //                 case Breakpoint.MdAndDown:
    //                     _dateTime = DateTime.Now.AddDays(8);
    //                     break;
    //                 case Breakpoint.LgAndDown:
    //                     _dateTime = DateTime.Now.AddDays(9);
    //                     break;
    //                 case Breakpoint.XlAndDown:
    //                     _dateTime = DateTime.Now.AddDays(10);
    //                     break;
    //                 case Breakpoint.SmAndUp:
    //                     _dateTime = DateTime.Now.AddDays(11);
    //                     break;
    //                 case Breakpoint.MdAndUp:
    //                     _dateTime = DateTime.Now.AddDays(12);
    //                     break;
    //                 case Breakpoint.LgAndUp:
    //                     _dateTime = DateTime.Now.AddDays(13);
    //                     break;
    //                 case Breakpoint.XlAndUp:
    //                     _dateTime = DateTime.Now.AddDays(14);
    //                     break;
    //                 case Breakpoint.None:
    //                     _dateTime = DateTime.Now.AddDays(15);
    //                     break;
    //                 case Breakpoint.Always:
    //                     _dateTime = DateTime.Now.AddDays(16);
    //                     break;
    //             }
    //             InvokeAsync(StateHasChanged);
    //         });

    //         StateHasChanged();
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }
}