@using FluentValidation;
@using HomeOrganizer.Common;
@using HomeOrganizer.Components
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Components.Errors
@using HomeOrganizer.Components.Features;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.Features;
@using HomeOrganizer.Models.User;
@using MudBlazor.Services;
@using MyWebsiteBlazor.Data.Database;
@using System.Reflection;

@inject UserService userService
@inject NavigationManager navigationManager
@inject ISnackbar snackbarService

@page "/ResetPassword/{*token}"
<PageTitle> Reset password </PageTitle>

<MudContainer Class="content px-4" Style="height:90%" MaxWidth="MaxWidth.Large">

    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Style="margin-top:10%;" Elevation="0">
        <MudPaper Class="pa-4" Style="width:400px !important;">
            <MudText Typo="Typo.h6" Align="Align.Center">
                Home Organizer
            </MudText>
            <MudText Typo="Typo.subtitle2" Align="Align.Center">
                Reset password
            </MudText>
            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-3" Elevation="0">
                <MudStack Style="width:80%">

                    @if (!afterReset)
                    {
                        @if (!canReset)
                        {
                            @if (checkErrorMessage.Length > 0)
                            {
                                <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                                    @checkErrorMessage
                                </MudText>
                            }
                            <MudTextField @bind-Value="userLogin"
                                          For="@(() => userLogin)"
                                          Immediate="true"
                                          Label="Login"
                                          Class="pt-3"
                                          Required="true"
                                          Placeholder="Login"
                                          OnKeyDown="OnLoginEnter" />

                            <MudButton Class="pt-1" OnClick="CheckToken" EndIcon="@Icons.Material.Filled.Check" Color="Color.Success" Variant="Variant.Outlined">
                                Check
                            </MudButton>
                        }
                        else
                        {
                            <MudForm Model="@model" @ref="@form" Validation="@(resetValidator.ValidateValue)" ValidationDelay="0">
                                <MudCardContent>
                                    <MudTextField @bind-Value="model.Password"
                                                  For="@(() => model.Password)"
                                                  Immediate="true"
                                                  Required="true"
                                                  Label="Password"
                                                  Placeholder="Password"
                                                  OnKeyDown="OnPasswordEnter"
                                                  InputType="@passwordsVisibilities["Password"].InputType"
                                                  Adornment="Adornment.End" AdornmentIcon="@passwordsVisibilities["Password"].Icon"
                                                  OnAdornmentClick="@passwordsVisibilities["Password"].ChangeVisibility" AdornmentAriaLabel="Show Password" />

                                    <MudTextField @bind-Value="model.PasswordRepeated"
                                                  For="@(() => model.PasswordRepeated)"
                                                  Immediate="true"
                                                  Required="true"
                                                  Label="Password repeated"
                                                  Placeholder="Repeat password"
                                                  OnKeyDown="OnPasswordEnter"
                                                  InputType="@passwordsVisibilities["Repeated"].InputType"
                                                  Adornment="Adornment.End" AdornmentIcon="@passwordsVisibilities["Repeated"].Icon"
                                                  OnAdornmentClick="@passwordsVisibilities["Repeated"].ChangeVisibility" AdornmentAriaLabel="Show Password" />
                                </MudCardContent>
                            </MudForm>

                            <MudButton Class="pt-1" OnClick="ResetUserPassword" EndIcon="@Icons.Material.Filled.LockReset" Color="Color.Error" Variant="Variant.Outlined">
                                Reset password
                            </MudButton>
                        }
                    }
                    else
                    {
                        <MudButton Class="pt-1" OnClick="BackToHome" EndIcon="@Icons.Material.Filled.Home" Color="Color.Success" Variant="Variant.Outlined">
                            Back to main website
                        </MudButton>
                    }

                </MudStack>

            </MudPaper>
        </MudPaper>
    </MudPaper>

</MudContainer>

@code {
    [Parameter]
    public string? Token { get; set; }

    private string userLogin = string.Empty;
    private string checkErrorMessage = string.Empty;
    private bool canReset = false;
    private bool afterReset = false;

    MudForm? form;
    ResetPasswordValidator resetValidator = new ResetPasswordValidator();
    ResetPasswordModel model = new ResetPasswordModel();

    private Dictionary<string, PasswordVisibility> passwordsVisibilities = new Dictionary<string, PasswordVisibility>()
    {
        {"Password", new PasswordVisibility()},
        {"Repeated", new PasswordVisibility()}
    };
    protected override void OnInitialized()
    {
        Token = Token ?? string.Empty;
    }

    private async Task OnLoginEnter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;
        await CheckToken();
    }

    private async Task OnPasswordEnter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;
        await ResetUserPassword();
    }

    private async Task CheckToken()
    {
        if (string.IsNullOrEmpty(userLogin))
        {
            canReset = false;
            checkErrorMessage = "Provided login is empty";
            return;
        }

        if (string.IsNullOrEmpty(Token))
        {
            canReset = false;
            checkErrorMessage = "Wrong token!";
            return;
        }

        ResetPasswordData resetData = await DbHandler.GetResetPasswordData(userLogin);
        if (resetData == null)
        {
            canReset = false;
            checkErrorMessage = "Cannot get reset password data, try resend email.";

            return;
        }

        if (Security.IsLinkExpired(resetData.CreationTime) || !Security.IsCorrectToken(Token, resetData))
        {
            canReset = false;
            checkErrorMessage = "Link expired, resend email.";

            return;
        }

        canReset = true;
        checkErrorMessage = string.Empty;
    }

    private async Task ResetUserPassword()
    {
        await form.Validate();
        if (!form.IsValid) return;

        UserData user = await DbHandler.GetUserByLogin(userLogin);
        if (user == null)
        {
            return;
        }

        user.ResetPassword(model.Password);
        var response = await DbHandler.UpdateUser(user);

        snackbarService.Clear();
        snackbarService.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (response.Status)
        {
            snackbarService.Add("Password successfully changed!", MudBlazor.Severity.Success);
        }
        else
        {
            snackbarService.Add("Couldn't change your password, try again later...", MudBlazor.Severity.Error);
        }
        afterReset = true;
    }

    private void BackToHome()
    {
        navigationManager.NavigateTo("/");
    }

    private class ResetPasswordModel
    {
        public string Password { get; set; } = string.Empty;
        public string PasswordRepeated { get; set; } = string.Empty;
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="UserRegisterModel"></typeparam>
    private class ResetPasswordValidator : AbstractValidator<ResetPasswordModel>
    {
        public ResetPasswordValidator()
        {
            RuleFor(m => m.Password).NotEmpty().WithMessage("Password cannot be empty")
                .MinimumLength(8).WithMessage("Password length must be at least 8.")
                .MaximumLength(50).WithMessage("Password length must not exceed 50.")
                .Matches(@"[A-Z]+").WithMessage("Password must contain at least one uppercase letter.")
                .Matches(@"[a-z]+").WithMessage("Password must contain at least one lowercase letter.")
                .Matches(@"[0-9]+").WithMessage("Password must contain at least one number.")
                .Matches(@"[\!\.@#\-_]+").WithMessage("Password must contain at least one special character ( ! . @ # - _ ).");

            RuleFor(m => m.PasswordRepeated)
                .Equal(m => m.Password).WithMessage("Repeated password must equal password");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ResetPasswordModel>.CreateWithOptions((ResetPasswordModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}