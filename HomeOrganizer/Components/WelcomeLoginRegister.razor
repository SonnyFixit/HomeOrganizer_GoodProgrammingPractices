@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.Communication;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@using System.Net.Mail;
@using System.Net;

@inject UserService userService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager


<MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Style="height:100%; width:100%;">
    <MudPaper Class="mt-16 mud-theme-transparent" Elevation="0">
        <MudPaper Class="pa-4" Width="400px">
            <MudText Typo="Typo.h6" Align="Align.Center">
                Home Organizer
            </MudText>
            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-3" Elevation="0">
                <MudStack Style="width:80%">
                    @if (cannotLogin)
                    {
                        <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                            Cannot login
                        </MudText>
                        if (showResetPassword)
                        {

                            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="mt-1"
                              OnClick="ResetPassword" Style="cursor:pointer;" ShowCloseIcon="true"
                              CloseIconClicked="(()=>{showResetPassword = false;})">
                                Reset your password
                            </MudAlert>
                        }

                        if (showUserNotFound)
                        {
                            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true" Class=""
                              OnClick="QuickRegister" Style="cursor:pointer;" ShowCloseIcon="true"
                              CloseIconClicked="(()=>{showUserNotFound = false;})">
                                Click here for quick register!
                            </MudAlert>
                        }

                    }

                    @if (loggingUser)
                    {
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-3" />
                    }

                    <MudTextField @bind-Value="userLogin"
                                  For="@(() => userLogin)"
                                  Immediate="true"
                                  Label="Login"
                                  Class="pt-3"
                                  Required="true"
                                  Placeholder="Login" />

                    <MudTextField @bind-Value="userPassword"
                                  For="@(() => userPassword)"
                                  Immediate="true"
                                  Label="Password"
                                  Class="pt-3"
                                  Required="true"
                                  Placeholder="Password"
                                  OnKeyDown="OnLoginEnter"
                                  InputType="@passwordVisibility.InputType"
                                  Adornment="Adornment.End" AdornmentIcon="@passwordVisibility.Icon"
                                  OnAdornmentClick="@passwordVisibility.ChangeVisibility" AdornmentAriaLabel="Show Password" />

                    <MudButton Class="pt-1" OnClick="LoginUser" EndIcon="@Icons.Material.Filled.Login" IconColor="Color.Success" Variant="Variant.Outlined">
                        Login
                    </MudButton>
                    <MudDivider Class="my-10" />
                    <MudButton OnClick="RegisterUser" EndIcon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Success" Variant="Variant.Outlined">
                        Register
                    </MudButton>
                </MudStack>

            </MudPaper>
        </MudPaper>
    </MudPaper>
</MudStack>


@code {
    private string userLogin = string.Empty;
    private string userPassword = string.Empty;

    private bool showUserNotFound = true;
    private bool loggingUser = false;
    private bool showResetPassword = false;
    private bool cannotLogin = false;

    private PasswordVisibility passwordVisibility = new PasswordVisibility();

    private async Task OnLoginEnter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;

        await LoginUser();
    }

    private async Task LoginUser()
    {
        if (userLogin.Length == 0) return;
        loggingUser = true;

        UserData? registeredUser = await DbHandler.GetUserByLogin(userLogin);
        loggingUser = false;

        if (registeredUser == null)
        {
            cannotLogin = true;
            showUserNotFound = true;
            showResetPassword = true;
            return;
        }

        bool goodPassword = registeredUser.Credentials.CheckPassword(userPassword);

        if (!goodPassword)
        {
            cannotLogin = true;
            showUserNotFound = true;
            showResetPassword = true;
            return;
        }


        cannotLogin = false;
        showUserNotFound = false;
        showResetPassword = false;

        userService.LoggedUser = registeredUser;
    }

    private async Task ProcessDialogResult(DialogResult result)
    {
        if (result.Canceled) return;
        if (result.Data is not UserData registeredUser) return;
        registeredUser.UseDarkTheme = userService.UnloggedDarkTheme;

        Response response = await DbHandler.CreateUser(registeredUser);

        if (!response.Status)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            snackbar.Add($"We couldn't create account. {response.Message}", Severity.Info);
            return;
        }

        userService.LoggedUser = registeredUser;
        StateHasChanged();
    }

    private async Task RegisterUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = false };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }

    private async Task QuickRegister()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = false };
        var parameters = new DialogParameters<RegisterUserDialog> { { d => d.QuickUserLogin, userLogin } };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", parameters, options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }

    private async Task ResetPassword()
    {
        showResetPassword = false;
        if (userLogin == null || userLogin.Length == 0) return;

        UserData? user = await DbHandler.GetUserByLogin(userLogin);
        if (user == null) return;

        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackbar.Add("We'll send you an email with reset password link...", Severity.Info);

        ResetPasswordData resetData = Security.CreateResetPasswordData(user.Credentials.Login);
        await DbHandler.AddResetPasswordData(resetData);

        string resetUrl = $"{navigationManager.BaseUri}ResetPassword/{resetData.Token}";

        try
        {
            await EmailService.SendResetPassword(user.Email, user.Credentials.Login, resetUrl);
        }
        catch (Exception ex)
        {
            snackbar.Clear();
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            snackbar.Add("Cannot send email to you :( Contact us please!", Severity.Info);
            Console.WriteLine(ex.Message);
        }
    }
}