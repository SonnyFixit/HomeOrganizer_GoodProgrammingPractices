@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;

@inject UserService userService
@inject IDialogService dialogService
@inject ISnackbar snackbar

<MudContainer Class="content px-4" Style="height:90%" MaxWidth="MaxWidth.Large">

    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Style="margin-top:15%;" Elevation="0">
        <MudPaper Class="pa-4" Style="width:400px !important;">
            <MudText Typo="Typo.h6" Align="Align.Center">
                Home Organizer
            </MudText>
            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-3" Elevation="0">
                <MudStack Style="width:80%">
                    @if (userNotFound && showUserNotFound)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="my-2" OnClick="QuickRegister" Style="cursor:pointer;" ShowCloseIcon="true" CloseIconClicked="(()=>{showUserNotFound = false;})">
                            User not found! <br>
                            Click here for quick register
                        </MudAlert>
                    }

                    @if (loggingUser)
                    {
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-3" />
                    }

                    <MudTextField @bind-Value="userLogin"
                                  For="@(() => userLogin)"
                                  Immediate="true"
                                  Label="Login"
                                  Class="pt-3"
                                  Placeholder="Provide login"
                                  OnKeyDown="OnLoginEnter" />
                    <MudButton Class="pt-1" OnClick="LoginUser" EndIcon="@Icons.Material.Filled.Login" IconColor="Color.Success" Variant="Variant.Outlined">
                        Login
                    </MudButton>
                    <MudDivider Class="my-10" />
                    <MudButton OnClick="RegisterUser" EndIcon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Success" Variant="Variant.Outlined">
                        Register
                    </MudButton>
                </MudStack>

            </MudPaper>
        </MudPaper>
    </MudPaper>

</MudContainer>

@code {
    private string userLogin = string.Empty;
    private bool showUserNotFound = true;
    private bool userNotFound = false;
    private bool loggingUser = false;

    private async Task OnLoginEnter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;

        await LoginUser();
    }

    private async Task LoginUser()
    {
        if (userLogin.Length == 0) return;
        loggingUser = true;

        UserData? registeredUser = await DatabaseHandlerMongoDB.GetUser(userLogin);
        if (registeredUser == null)
        {
            userNotFound = true;
            showUserNotFound = true;
            loggingUser = false;
            return;
        }
        loggingUser = false;
        userNotFound = false;
        showUserNotFound = false;

        userService.LoggedUser = registeredUser;
    }

    private async Task ProcessDialogResult(DialogResult result)
    {
        if (result.Canceled) return;
        if (result.Data is not UserData registeredUser) return;
        registeredUser.UseDarkTheme = userService.UnloggedDarkTheme;

        await DatabaseHandlerMongoDB.CreateUser(registeredUser);

        userService.LoggedUser = registeredUser;
        StateHasChanged();
    }

    private async Task RegisterUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }

    private async Task QuickRegister()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var parameters = new DialogParameters<RegisterUserDialog> { { d => d.QuickUserLogin, userLogin } };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", parameters, options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }
}