@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@using System.Net.Mail;
@using System.Net;

@inject UserService userService
@inject IDialogService dialogService
@inject ISnackbar snackbar

<MudContainer Class="content px-4" Style="height:90%" MaxWidth="MaxWidth.Large">

    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent" Style="margin-top:10%;" Elevation="0">
        <MudPaper Class="pa-4" Style="width:400px !important;">
            <MudText Typo="Typo.h6" Align="Align.Center">
                Home Organizer
            </MudText>
            <MudPaper Class="d-flex justify-center flex-grow-1 gap-4 mud-theme-transparent mt-3" Elevation="0">
                <MudStack Style="width:80%">
                    @if (cannotLogin)
                    {
                        <MudText Typo="Typo.caption" Align="Align.Center" Color="Color.Error">
                            Cannot login
                        </MudText>
                        if (showResetPassword)
                        {

                            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="mt-1"
                              OnClick="ResetPassword" Style="cursor:pointer;" ShowCloseIcon="true"
                              CloseIconClicked="(()=>{showResetPassword = false;})">
                                Reset your password
                            </MudAlert>
                        }

                        if (showUserNotFound)
                        {
                            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true" Class=""
                              OnClick="QuickRegister" Style="cursor:pointer;" ShowCloseIcon="true"
                              CloseIconClicked="(()=>{showUserNotFound = false;})">
                                Click here for quick register!
                            </MudAlert>
                        }

                    }

                    @if (loggingUser)
                    {
                        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-3" />
                    }

                    <MudTextField @bind-Value="userLogin"
                                  For="@(() => userLogin)"
                                  Immediate="true"
                                  Label="Login"
                                  Class="pt-3"
                                  Required="true"
                                  Placeholder="Login" />

                    <MudTextField @bind-Value="userPassword"
                                  For="@(() => userPassword)"
                                  Immediate="true"
                                  Label="Password"
                                  InputType="InputType.Password"
                                  Class="pt-3"
                                  Required="true"
                                  Placeholder="Password"
                                  OnKeyDown="OnLoginEnter" />

                    <MudButton Class="pt-1" OnClick="LoginUser" EndIcon="@Icons.Material.Filled.Login" IconColor="Color.Success" Variant="Variant.Outlined">
                        Login
                    </MudButton>
                    <MudDivider Class="my-10" />
                    <MudButton OnClick="RegisterUser" EndIcon="@Icons.Material.Filled.PersonAdd" IconColor="Color.Success" Variant="Variant.Outlined">
                        Register
                    </MudButton>
                </MudStack>

            </MudPaper>
        </MudPaper>
    </MudPaper>

</MudContainer>

@code {
    private string userLogin = string.Empty;
    private string userPassword = string.Empty;

    private bool showUserNotFound = true;
    private bool loggingUser = false;
    private bool showResetPassword = false;
    private bool cannotLogin = false;

    private async Task OnLoginEnter(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;

        await LoginUser();
    }

    private async Task LoginUser()
    {
        if (userLogin.Length == 0) return;
        loggingUser = true;

        UserData? registeredUser = await DbHandler.GetUser(userLogin);
        loggingUser = false;

        if (registeredUser == null)
        {
            cannotLogin = true;
            showUserNotFound = true;
            showResetPassword = true;
            return;
        }

        bool goodPassword = registeredUser.Credentials.CheckPassword(userPassword);

        if (!goodPassword)
        {
            cannotLogin = true;
            showUserNotFound = true;
            showResetPassword = true;
            return;
        }


        cannotLogin = false;
        showUserNotFound = false;
        showResetPassword = false;

        userService.LoggedUser = registeredUser;
    }

    private async Task ProcessDialogResult(DialogResult result)
    {
        if (result.Canceled) return;
        if (result.Data is not UserData registeredUser) return;
        registeredUser.UseDarkTheme = userService.UnloggedDarkTheme;

        await DbHandler.CreateUser(registeredUser);

        userService.LoggedUser = registeredUser;
        StateHasChanged();
    }

    private async Task RegisterUser()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }

    private async Task QuickRegister()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var parameters = new DialogParameters<RegisterUserDialog> { { d => d.QuickUserLogin, userLogin } };
        var dialog = await dialogService.ShowAsync<RegisterUserDialog>("Registration", parameters, options);

        var result = await dialog.Result;

        await ProcessDialogResult(result);
    }

    private async Task ResetPassword()
    {
        showResetPassword = false;
        if (userLogin == null || userLogin.Length == 0) return;

        UserData? user = await DbHandler.GetUser(userLogin);
        if (user == null) return;

        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        snackbar.Add("We'll send you an email about resetting password...", Severity.Normal);

        await SendResetPasswordEmail(user.Email, user.Credentials.Login);
    }

    private async Task SendResetPasswordEmail(string toEmail, string login)
    {
        try
        {
            using (var client = new SmtpClient())
            {
                client.Host = "smtp.gmail.com";
                client.Port = 587;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.UseDefaultCredentials = false;
                client.EnableSsl = true;
                client.Credentials = new NetworkCredential("home.organizer.333@gmail.com", "zlcgbvthwvdbxfuu");
                using (var message = new MailMessage(
                    from: new MailAddress("home.organizer.333@gmail.com", "Home Organizer"),
                    to: new MailAddress(toEmail, $"{login}")
                    ))
                {

                    message.Subject = "Reset your password";
                    message.Body = "Do you really wanna reset your password?";

                    await client.SendMailAsync(message);
                }
            }

            // Informacja o pomyślnym wysłaniu maila
            Console.WriteLine("Reset password email sent successfully.");
        }
        catch (Exception ex)
        {
            // Obsługa błędów
            Console.WriteLine($"Error sending reset password email: {ex.Message}");
        }
    }
}