@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.User;
@inject IDialogService DialogService
@inject UserService userService

@if (Feature == null) return;

<MudItem xs="12" sm="6" md="3" xl="3" Class="pa-5">
    <MudCard Height="100%" Class="pa-3" Style="cursor: pointer; overflow:hidden;"
             draggable="true" dropzone="move"
    @ondragstart="HandleDragStart"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave"
             ondragover="event.preventDefault();"
    @ondrop="HandleDrop">
        <MudGrid>
            <MudItem xs="10" Class="py-0  d-flex align-center noSelect" @onclick="OpenFeature">
                <MudText Typo="Typo.h5">
                    @Feature.TileData.UserGivenName [@Feature.TileData.Position]
                </MudText>
            </MudItem>

            <MudItem xs="2" Class="pa-0 d-flex align-center justify-center noSelect">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" Class="pa-0">
                    <MudMenuItem OnClick="RemoveFeature">
                        Delete
                    </MudMenuItem>
                    <MudMenuItem>Edit</MudMenuItem>
                </MudMenu>
            </MudItem>

            <MudItem xs="12" Class="pb-0 pt-0 noSelect d-flex align-center" @onclick="OpenFeature">
                <MudText Typo="Typo.caption">
                    @Feature.FeatureData.Name
                </MudText>
            </MudItem>

            <MudItem xs="10" Class="noSelect  d-flex align-center" Style="height: 100px" @onclick="OpenFeature">
                <MudText Typo="Typo.body1">
                    @Feature.TileData.UserGivenDescription
                </MudText>
            </MudItem>

            <MudItem xs="2" Class="pa-0 d-flex align-center justify-center" @onclick="OpenFeature">
                <MudIcon Icon="@Feature.TileData.Icon" Size="Size.Large" Class="mx-auto" />
            </MudItem>
        </MudGrid>
    </MudCard>
</MudItem>

@code {
    [Parameter]
    public FeatureBase Feature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnRemoveFeature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnOpenFeature { get; set; }

    private bool dragDropTarget = false;

    private async Task RemoveFeature()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteConfirmDialog> { { f => f.Feature, Feature } };
        var dialog = await DialogService.ShowAsync<DeleteConfirmDialog>("Confirm", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not bool shouldDelete) return;
        if (!shouldDelete) return;

        await OnRemoveFeature.InvokeAsync(Feature);
    }

    private void OpenFeature()
    {
        if (userService.DraggedFeatureTile != null) return;
        OnOpenFeature.InvokeAsync(Feature);
    }

    private void HandleDrop(DragEventArgs e)
    {
        if (userService.DraggedFeatureTile == null) return;
        if (userService.DraggedFeatureTile == Feature) return;

        int dragPosition = userService.DraggedFeatureTile.TileData.Position;
        int dropPosition = Feature.TileData.Position;
        var sortedFeatures = userService.LoggedUser.Features.OrderBy(f => f.TileData.Position).ToList();

        int direction = dragPosition > dropPosition ? 1 : -1;

        for (int i = dropPosition; i != dragPosition; i += direction)
        {
            sortedFeatures[i].TileData.Position += direction;
        }
        sortedFeatures[dragPosition].TileData.Position = dropPosition;
        UserData tmpUser = userService.LoggedUser;
        tmpUser.Features = sortedFeatures;
        userService.LoggedUser = tmpUser;
        userService.DraggedFeatureTile = null;
    }

    private void HandleDragStart(DragEventArgs e)
    {
        userService.DraggedFeatureTile = Feature;
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        // Changle classes of tiles
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        // Remove changed classes
    }
}