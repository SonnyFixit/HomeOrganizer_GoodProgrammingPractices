@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.User;

@inject IDialogService dialogService
@inject UserService userService

@if (Feature == null) return;

<MudItem xs="12" sm="6" md="3" xl="3" Class="pa-5">

    <MudCard Style="@($"height:100%; cursor: pointer; overflow:hidden; background-color:{Constants.TileColorPalettes[IsDarkMode][Feature.TileData.ColorIndex]}; ")" draggable="true" dropzone="move"
             Class="d-flex flex-column flex-grow-1 align-stretch"
    @ondragstart="HandleDragStart"
    @ondragenter="HandleDragEnter"
    @ondragleave="HandleDragLeave"
             ondragover="event.preventDefault();"
    @ondrop="HandleDrop"
    @onclick="OpenFeature">
        <MudCardHeader>
            <CardHeaderContent>
                <MudStack Spacing="0">
                    <MudText Typo="Typo.h6">
                        @Feature.TileData.UserGivenName
                    </MudText>
                    <MudText Typo="Typo.caption">
                        <i>
                            @Feature.FeatureData.Name
                        </i>
                    </MudText>
                </MudStack>

            </CardHeaderContent>
            <CardHeaderActions>
                <MudMenu Icon="@Icons.Material.Filled.Settings" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
                    <MudMenuItem OnClick="RemoveFeature">
                        Delete
                    </MudMenuItem>
                    <MudMenuItem OnClick="EditFeature">
                        Edit
                    </MudMenuItem>
                </MudMenu>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="flex-grow-1">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.End" Style="height:100%;">
                <MudText Typo="Typo.body1">
                    @Feature.TileData.UserGivenDescription
                </MudText>
                <MudIcon Icon="@Feature.TileData.Icon" Size="Size.Large" />
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Parameter]
    public FeatureBase? Feature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnOpenFeature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnEditFeature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnRemoveFeature { get; set; }

    [Parameter]
    public bool IsDarkMode { get; set; } = false;
    private bool dragDropTarget = false;

    private async Task EditFeature()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<EditTileDialog>();
        parameters.Add("Feature", Feature);
        parameters.Add("UseDarkTheme", IsDarkMode);

        var dialog = await dialogService.ShowAsync<EditTileDialog>($"Edit {Feature.TileData.UserGivenName} [{Feature.FeatureData.Name}]", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not FeatureBase feature) return;

        Feature = feature;
        await OnEditFeature.InvokeAsync(Feature);
    }

    private async Task RemoveFeature()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteConfirmDialog> { { f => f.Feature, Feature } };
        var dialog = await dialogService.ShowAsync<DeleteConfirmDialog>("Confirm", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not bool shouldDelete) return;
        if (!shouldDelete) return;

        await OnRemoveFeature.InvokeAsync(Feature);
    }

    private void OpenFeature()
    {
        if (userService.DraggedFeatureTile != null) return;
        OnOpenFeature.InvokeAsync(Feature);
    }

    private void HandleDrop(DragEventArgs e)
    {
        if (userService.DraggedFeatureTile == null) return;
        if (userService.DraggedFeatureTile == Feature) return;

        int dragPosition = userService.DraggedFeatureTile.TileData.Position;
        int dropPosition = Feature.TileData.Position;
        var sortedFeatures = userService.LoggedUser.Features.OrderBy(f => f.TileData.Position).ToList();

        int direction = dragPosition > dropPosition ? 1 : -1;

        for (int i = dropPosition; i != dragPosition; i += direction)
        {
            sortedFeatures[i].TileData.Position += direction;
        }
        sortedFeatures[dragPosition].TileData.Position = dropPosition;
        UserData tmpUser = userService.LoggedUser;
        tmpUser.Features = sortedFeatures;
        userService.LoggedUser = tmpUser;
        userService.DraggedFeatureTile = null;
    }

    private void HandleDragStart(DragEventArgs e)
    {
        userService.DraggedFeatureTile = Feature;
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        // Changle classes of tiles
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        // Remove changed classes
    }
}