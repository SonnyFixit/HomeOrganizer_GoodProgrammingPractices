@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.User;

@inject IDialogService dialogService
@inject UserService userService
@inject IJSRuntime javascript

@if (Feature == null) return;

<MudItem xs="12" sm="6" md="3" xl="3" Class="@dragClass" Style="height:200px;">
    <MudPaper Class="mud-theme-transparent" Style="width:100%; height:100%;"
              Elevation="0"
              draggable="true"
              dropzone="move"
              id="@($"FeatureTile{Feature.TileData.Position}")"
              ondragover="event.preventDefault();"
              @ondragstart="HandleDragStart"
              @ondragenter="HandleDragEnter"
              @ondragleave="HandleDragLeave"
              @ondragend="HandleDragEnd"
              @onclick="OpenFeature"
              @ondrop="HandleDrop">
        <MudCard Style="@($"height:100%; cursor: pointer; overflow:hidden; background-color:{Constants.TileColorPalettes[IsDarkMode][Feature.TileData.ColorIndex]}; {outlineStyle} {marginStyle}")"
                 Class="d-flex flex-column flex-grow-1 align-stretch">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h6">
                            @Feature.TileData.UserGivenName
                        </MudText>
                        <MudText Typo="Typo.caption">
                            <i>
                                @Feature.FeatureData.Name
                            </i>
                        </MudText>
                    </MudStack>

                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.Settings" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
                        <MudMenuItem OnClick="RemoveFeature">
                            Delete
                        </MudMenuItem>
                        <MudMenuItem OnClick="EditFeature">
                            Edit
                        </MudMenuItem>
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="flex-grow-1">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.End" Style="height:100%;">
                    <MudText Typo="Typo.body1">
                        @Feature.TileData.UserGivenDescription
                    </MudText>
                    <MudIcon Icon="@Feature.TileData.Icon" Size="Size.Large" />
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public FeatureBase? Feature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnOpenFeature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnEditFeature { get; set; }

    [Parameter]
    public EventCallback<FeatureBase> OnRemoveFeature { get; set; }

    [Parameter]
    public bool IsDarkMode { get; set; } = false;
    private bool dragDropTarget = false;

    private int onHoverCounter = 0;
    private string outlineStyle = string.Empty;
    private string marginStyle = string.Empty;
    private string dragClass = "pa-4";

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await javascript.InvokeVoidAsync("addCustomListener", $"FeatureTile{Feature.TileData.Position}");
    //     }
    // }

    private async Task EditFeature()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<EditTileDialog>();
        parameters.Add("Feature", Feature);
        parameters.Add("UseDarkTheme", IsDarkMode);

        var dialog = await dialogService.ShowAsync<EditTileDialog>($"Edit {Feature.TileData.UserGivenName} [{Feature.FeatureData.Name}]", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not FeatureBase feature) return;

        Feature = feature;
        await OnEditFeature.InvokeAsync(Feature);
    }

    private async Task RemoveFeature()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteConfirmDialog> { { f => f.Feature, Feature } };
        var dialog = await dialogService.ShowAsync<DeleteConfirmDialog>("Confirm", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not bool shouldDelete) return;
        if (!shouldDelete) return;

        await OnRemoveFeature.InvokeAsync(Feature);
    }

    private void OpenFeature()
    {
        if (userService.DraggedFeatureTile != null) return;
        OnOpenFeature.InvokeAsync(Feature);
    }

    private void ClearHoverData()
    {
        onHoverCounter = 0;
        outlineStyle = string.Empty;
        marginStyle = string.Empty;
    }

    private void HandleDrop(DragEventArgs e)
    {
        ClearHoverData();

        if (userService.DraggedFeatureTile == null) return;
        if (userService.DraggedFeatureTile == Feature) return;

        var sortedFeatures = userService.LoggedUser.Features.OrderBy(f => f.TileData.Position).ToList();
        int dragPosition = userService.DraggedFeatureTile.TileData.Position;
        int dropPosition = Feature.TileData.Position;

        int direction = dragPosition > dropPosition ? 1 : -1;

        for (int i = dropPosition; i != dragPosition; i += direction)
        {
            sortedFeatures[i].TileData.Position += direction;
        }

        sortedFeatures[dragPosition].TileData.Position = dropPosition;
        UserData tmpUser = userService.LoggedUser;
        tmpUser.Features = sortedFeatures;
        tmpUser.OpenedFeature = null;
        userService.LoggedUser = tmpUser;
        userService.DraggedFeatureTile = null;
    }

    private void HandleDragStart(DragEventArgs e)
    {
        userService.DraggedFeatureTile = Feature;
        dragClass = "pa-6";
    }

    private void HandleDragEnd(DragEventArgs e)
    {
        ClearHoverData();
        ChangeHoverClass();
        dragClass = "pa-4";

        userService.LoggedUser.OpenedFeature = null;
        userService.DraggedFeatureTile = null;
    }

    private void ChangeHoverClass()
    {
        string outlineColor = IsDarkMode ? "#A8A8A8" : "#3d3d3d";
        outlineStyle = onHoverCounter > 0 ? $"outline: 2px dashed {outlineColor};" : string.Empty;

        if (Feature == null || userService.DraggedFeatureTile == null) return;
        // DragPosition > DropPosition -> direction
        string marginSide = userService.DraggedFeatureTile.TileData.Position > Feature.TileData.Position ? "left" : "right";
        marginStyle = onHoverCounter > 0 ? $"margin-{marginSide}:50px !important;" : string.Empty;
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        if (userService.DraggedFeatureTile == Feature) return;
        onHoverCounter++;
        ChangeHoverClass();
    }

    private async Task HandleDragLeave(DragEventArgs e)
    {
        await Task.Delay(50);
        if (onHoverCounter > 0)
            onHoverCounter--;

        ChangeHoverClass();
    }
}

