@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Common
@using HomeOrganizer.Components.Errors
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.Communication;
@using HomeOrganizer.Models.Features;
@using HomeOrganizer.Models.User;
@using ApexCharts;

@inject UserService userService
@inject NavigationManager navigationManager
@implements IDisposable

@if (Feature == null || introduction == null)
{
    <NoFeaturePanelError Feature="@Feature" CastToFeature="@introduction" PanelName="Introduction" />
    return;
}

<MudStack>

    <FeatureTopBar Feature="introduction" />

    <MudGrid>

        <MudItem xs="7">
            <MudPaper Height="200px" Class="pa-2">
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h5">
                        Hello!
                    </MudText>
                    <MudText Typo="Typo.body1">
                        This is the introduction for Home Organizer,
                        our application that helps keeping everything together.
                    </MudText>
                    <MudText Typo="Typo.body1">
                        This panel is a playground for you to test
                        some smaller features that are used in other panels.
                    </MudText>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="1">
            <MudPaper Height="200px" Class="mud-theme-transparent" Elevation="0" />
        </MudItem>

        <MudItem xs="4">
            <MudPaper Height="200px" Style="overflow:hidden;" Elevation="0" Class="mud-theme-transparent" Square="true">
                <MudImage Src="images/introduction/dog.jpg"
                          Class="rounded"
                          ObjectFit="ObjectFit.ScaleDown"
                          Height="200" />
            </MudPaper>
        </MudItem>

        <MudItem xs="4">
            <MudPaper Height="200px" Style="overflow:hidden;">
                <MudImage Src="images/introduction/sunset.jpg"
                          ObjectFit="ObjectFit.Cover"
                          Style="width:100%;" Height="200" />
            </MudPaper>
        </MudItem>

        <MudItem xs="1">
            <MudPaper Height="200px" Class="mud-theme-transparent" Elevation="0" />
        </MudItem>

        <MudItem xs="7">
            <MudPaper Height="200px" Class="pa-2">
                <MudText Typo="Typo.body1">
                    You can edit this panel data from previous screen - home page.
                    Click <i>tile settings icon</i> (right top) and change something!
                </MudText>
                <MudText Typo="Typo.body1">
                    You can add more panels in home screen by clicking bottom + button and chosing one!
                    Every panel is different in its structure and offers different features.
                    If you cannot find the right panel for your requirements you can create custom one.
                    Or maybe you have some thoughts on existing ones? Let us know via contact form - bottm right button.
                </MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="6">
            <MudPaper Height="300px" Class="pa-2 overflow-scroll">
                <ApexChart TItem="SinglePoint" Height="260" Width="1500" Options="@options" @ref="@chart"
                           Title="Your expanses">

                    @foreach (var series in DataSeries)
                    {
                        <ApexPointSeries TItem="SinglePoint"
                                         Items="@series.Value"
                                         Name="@series.Key"
                                         SeriesType="SeriesType.Bar"
                                         XValue="e => e.CreateDateText()"
                                         YValue="e=> (decimal)e.Value" />
                    }

                </ApexChart>
            </MudPaper>
        </MudItem>

    </MudGrid>

</MudStack>


@code {
    [Parameter]
    public FeatureBase? Feature { get; set; }
    private Introduction? introduction = null;

    private ApexChart<SinglePoint> chart;

    ApexChartOptions<SinglePoint> options = new ApexCharts.ApexChartOptions<SinglePoint>()
        {
            Legend = new Legend()
            {

            },
            Theme = new Theme()
            {
                Mode = Mode.Dark
            }
        };

    private Dictionary<string, List<SinglePoint>> DataSeries { get; set; } = new Dictionary<string, List<SinglePoint>>()
    {
        {"Food", new List<SinglePoint>()},
        {"Clothes", new List<SinglePoint>()},
        {"Travels", new List<SinglePoint>()},
        {"Games", new List<SinglePoint>()},
        {"Subcriptions", new List<SinglePoint>()},
        {"Other", new List<SinglePoint>()}
    };

    public class SinglePoint
    {
        public DateTime Date { get; set; }
        public double Value { get; set; }

        public string CreateDateText()
        {
            return $"{Date.Month}/{Date.Year}";
        }
    }

    protected override void OnInitialized()
    {
        if (Feature == null) return;
        if (Feature is not Introduction receivedFeature) return;
        introduction = receivedFeature;

        userService.OnChange += HandleUserUpdate;

        // last 3 years
        int months = 36;
        for (int i = 0; i < months; i++)
        {
            foreach (var series in DataSeries)
            {
                series.Value.Add(new SinglePoint()
                    {
                        Date = DateTime.Now.AddMonths(-i),
                        Value = Random.Shared.Next(500) + Math.Round((double)Random.Shared.NextDouble(), 2)
                    });
            }
        }

        base.OnInitialized();
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }

    private void HandleUserUpdate()
    {
        if (userService.LoggedUser == null) return;

        options.Theme.Mode = userService.LoggedUser.UseDarkTheme ? Mode.Dark : Mode.Light;
        StateHasChanged();
        chart.UpdateOptionsAsync(false, false, false);
        chart.RenderAsync();
    }
}