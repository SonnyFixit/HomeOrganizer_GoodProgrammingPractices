@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.Communication;
@using HomeOrganizer.Models.User;

@inject NavigationManager navigationManager
@inject IDialogService DialogService
@inject UserService userService


@if (UserData == null) return;

<MudItem xs="6" sm="4" md="3" xl="3" Style="height: 120px">
    <MudMenu Style="width:100%;" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter" Dense="true">
        <ActivatorContent>
            <MudPaper Width="180px" Height="100%" Class="pa-3 addFeatureTileContent mx-auto">
                <MudText Typo="Typo.h1" Align="Align.Center" Class="noSelect" Style="line-height: 60px;">
                    +
                </MudText>
            </MudPaper>
        </ActivatorContent>
        <ChildContent>
            @foreach (var featureName in UserData.GetAvailableFeatures())
            {
                <MudMenuItem OnClick="((e)=>{ AddFeature(featureName); })">
                    @featureName
                </MudMenuItem>
            }
        </ChildContent>
    </MudMenu>
</MudItem>



@code {
    [Parameter]
    public UserData UserData { get; set; }

    async Task AddFeature(string featureName)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<CreateTileDialog> { { d => d.FeatureName, featureName } };
        var dialog = await DialogService.ShowAsync<CreateTileDialog>($"Provide '{featureName}' data", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled) return;
        if (result.Data is not FeatureBase feature) return;

        Response addResponse = UserData.AddFeature(feature);
        if (addResponse.Status)
        {
            UserData.OpenedFeature = feature;
            userService.LoggedUser = UserData;
        }
        else
        {
            //warning message
        }
    }
}