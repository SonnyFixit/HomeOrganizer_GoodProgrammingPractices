@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@implements IDisposable
@inject UserService userService
@inject NavigationManager navigationManager

<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" Theme="customTheme" />

<MudAppBar Color="Color.Inherit" Fixed="false" Dense="true">
    <MudPaper Class="mud-theme-transparent" Elevation="0" Style="width:170px">
        <MudButton StartIcon="@Icons.Material.Filled.Home" Color="Color.Inherit" ButtonType="ButtonType.Button" OnClick="GoHome">
            <MudText>
                Home organizer
            </MudText>
        </MudButton>
    </MudPaper>

    <MudSpacer />
    @if (User != null)
    {
        <MudPaper Class="mud-theme-transparent" Elevation="0" Width="300px" Height="100%" Style="line-height:48px">
            <MudText Align="Align.Center" Style="line-height:48px" Class="noSelect">
                @welcome
            </MudText>
        </MudPaper>
        <MudToggleIconButton ToggledChanged="@UpdateUserTheme"
                         Icon="@Icons.Material.Filled.NightsStay" Color="@Color.Tertiary" Title="Change theme to Dark"
                         ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Tertiary" ToggledTitle="Change theme to Light" />
    }
    else
    {
        <MudPaper Class="mud-theme-transparent d-flex justify-center flex-grow-1 gap-4" Elevation="0" Style="width:300px">
            <MudToggleIconButton ToggledChanged="@UpdateUserTheme" Class="mx-0"
                             Icon="@Icons.Material.Filled.NightsStay" Color="@Color.Tertiary" Title="Change theme to Dark"
                             ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Tertiary" ToggledTitle="Change theme to Light" />
        </MudPaper>
    }
    <MudSpacer />
    <MudPaper Class="mud-theme-transparent d-flex justify-end align-center" Elevation="0" Width="170px" Height="100%">
        @if (User != null)
        {
            <MudMenu>
                <ActivatorContent>
                    <MudImage Width="40" Height="40" Src="images/DefaultUser.png" Alt="User profile avatar" Elevation="25" Class="rounded-lg" Style="cursor:pointer" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@OpenUserPanel" Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                    <MudMenuItem OnClick="@LogOut" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
    </MudPaper>
</MudAppBar>

@code {
    public UserData User { get; set; }
    public bool IsDarkMode { get; set; } = false;
    private string welcome = string.Empty;

    private async void HandleUserUpdate()
    {
        User = userService.LoggedUser;
        if (User != null)
            IsDarkMode = User.UseDarkTheme;
        else
            IsDarkMode = userService.UnloggedDarkTheme;

        if (User != null && welcome.Length == 0)
        {
            string[] welcomes = new string[] { "Hello", "Welcome", "Good day", "Yo, what's up", " Good to see you", "Welcome back" };
            welcome = $"{welcomes[Random.Shared.Next(welcomes.Length)]}, {User.Name}!";
        }

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        User = userService.LoggedUser;
        if (User != null)
            IsDarkMode = User.UseDarkTheme;
        userService.OnChange += HandleUserUpdate;
    }

    private void GoHome()
    {
        if (User != null)
        {
            User.OpenedFeature = null;
            userService.LoggedUser = User;
        }
        navigationManager.NavigateTo("/");
    }

    private void UpdateUserTheme()
    {
        IsDarkMode = !IsDarkMode;

        if (User != null)
        {
            User.UseDarkTheme = IsDarkMode;
            userService.LoggedUser = User;
        }
        else
        {
            userService.UnloggedDarkTheme = IsDarkMode;
        }
    }

    private void OpenUserPanel()
    {
        userService.LoggedUser = User;
        navigationManager.NavigateTo("/UserPanel");
    }

    private async Task LogOut()
    {
        // Update user data before log out
        userService.UnloggedDarkTheme = User.UseDarkTheme;
        await DbHandler.UpdateUser(User);

        // log out
        User = null;
        userService.LoggedUser = null;
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }


    private MudTheme customTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                // Main colors
                Primary = Colors.Blue.Lighten1,
                Secondary = Colors.Teal.Lighten1,

                // Theme icon color...
                Tertiary = Colors.BlueGrey.Lighten1,

                // Main elements
                Background = Colors.LightBlue.Lighten4,


                // Appbar
                AppbarBackground = Colors.DeepOrange.Lighten2,
                AppbarText = Colors.Shades.Black
            },

            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Darken2,
                Secondary = Colors.Teal.Darken2,

                Tertiary = Colors.Amber.Lighten3,
            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            }
        };

}