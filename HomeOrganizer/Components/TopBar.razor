@using HomeOrganizer.Common;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@implements IDisposable
@inject UserService userService
@inject NavigationManager navigationManager

<MudThemeProvider @bind-IsDarkMode="@isDarkMode" Theme="Constants.CustomTheme" />

<MudAppBar Color="Color.Inherit" Fixed="false" Dense="true">
    <MudPaper Class="mud-theme-transparent" Elevation="0" Style="width:170px">
        <MudButton StartIcon="@Icons.Material.Filled.Home" Color="Color.Inherit" ButtonType="ButtonType.Button" OnClick="GoHome">
            <MudText>
                Home organizer
            </MudText>
        </MudButton>
    </MudPaper>

    <MudSpacer />
    @if (user != null)
    {
        <div style="width:40px;">
        </div>
        <MudPaper Class="mud-theme-transparent" Elevation="0" Width="200px" Height="100%" Style="line-height:48px">
            <MudText Align="Align.Center" Style="line-height:48px" Class="noSelect">
                @welcome
            </MudText>
        </MudPaper>
        <MudToggleIconButton ToggledChanged="@UpdateUserTheme" Toggled="@isDarkMode" Edge="Edge.End"
                         Icon="@Icons.Material.Filled.NightsStay" Color="@Color.Tertiary" Title="Change theme to Dark"
                         ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Tertiary" ToggledTitle="Change theme to Light" />
    }
    else
    {
        <MudPaper Class="mud-theme-transparent d-flex justify-center flex-grow-1 gap-4" Elevation="0" Style="width:300px">
            <MudToggleIconButton ToggledChanged="@UpdateUserTheme" Class="mx-0" Toggled="@isDarkMode"
                             Icon="@Icons.Material.Filled.NightsStay" Color="@Color.Tertiary" Title="Change theme to Dark"
                             ToggledIcon="@Icons.Material.Filled.WbSunny" ToggledColor="@Color.Tertiary" ToggledTitle="Change theme to Light" />
        </MudPaper>
    }
    <MudSpacer />
    <MudPaper Class="mud-theme-transparent d-flex justify-end align-center" Elevation="0" Width="170px" Height="100%">
        @if (user != null)
        {
            <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudAvatar Rounded="true" Style="cursor:pointer; height:40px; width:40px;">
                        <MudImage Width="40" Height="40" Src="@user.Avatar" Alt="User profile avatar" Elevation="25" />
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@OpenUserPanel" Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                    <MudMenuItem OnClick="@LogOut" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
    </MudPaper>
</MudAppBar>

@code {
    private UserData user { get; set; }
    private bool isDarkMode { get; set; } = false;
    private string welcome = string.Empty;

    private async void HandleUserUpdate()
    {
        user = userService.LoggedUser;
        isDarkMode = user == null ? userService.UnloggedDarkTheme : user.UseDarkTheme;

        if (user != null && welcome.Length == 0)
        {
            string[] welcomes = new string[] { "Hello", "Welcome", "Good day", "Yo, what's up", " Good to see you", "Welcome back", "Ayooo" };
            welcome = $"{welcomes[Random.Shared.Next(welcomes.Length)]}, {user.Name}!";
        }

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        user = userService.LoggedUser;
        isDarkMode = user == null ? userService.UnloggedDarkTheme : user.UseDarkTheme;

        userService.OnChange += HandleUserUpdate;
    }

    public void Dispose()
    {
        userService.OnChange -= HandleUserUpdate;
    }

    private void GoHome()
    {
        if (user != null)
        {
            user.OpenedFeature = null;
            userService.LoggedUser = user;
        }
        navigationManager.NavigateTo("/");
    }

    private void UpdateUserTheme()
    {
        isDarkMode = !isDarkMode;

        if (user != null)
        {
            user.UseDarkTheme = isDarkMode;
            userService.LoggedUser = user;
        }
        else
        {
            userService.UnloggedDarkTheme = isDarkMode;
        }
    }

    private void OpenUserPanel()
    {
        userService.LoggedUser = user;
        navigationManager.NavigateTo("/UserPanel");
    }

    private async Task LogOut()
    {
        // Update user data before log out
        userService.UnloggedDarkTheme = user.UseDarkTheme;
        await DbHandler.UpdateUser(user);

        // log out
        user = null;
        userService.LoggedUser = null;

        navigationManager.NavigateTo("/");
    }
}