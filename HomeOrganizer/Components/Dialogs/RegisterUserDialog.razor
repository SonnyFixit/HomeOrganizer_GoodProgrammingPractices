@using HomeOrganizer.Common;
@using HomeOrganizer.Models.Features;
@using FluentValidation
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@using System.Text.RegularExpressions;

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <DialogContent>
        <MudForm Model="@model" @ref="@form" Validation="@(registerValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                @if (userExists)
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        Login is already taken!
                    </MudText>
                }
                <MudTextField @bind-Value="model.Login"
                              For="@(() => model.Login)"
                              Immediate="true"
                              Required="true"
                              Label="Login"
                              InputType="InputType.Text"
                              Placeholder="Login" />

                <MudTextField @bind-Value="model.Password"
                              For="@(() => model.Password)"
                              Immediate="true"
                              Required="true"
                              Label="Password"
                              InputType="InputType.Password"
                              Placeholder="Password" />

                <MudTextField @bind-Value="model.PasswordRepeated"
                              For="@(() => model.PasswordRepeated)"
                              Immediate="true"
                              Required="true"
                              Label="Password repeated"
                              InputType="InputType.Password"
                              Placeholder="Repeat password" />

                <MudText Typo="Typo.caption"> We don't send  any newsletters. It is mainly for reseting your password.</MudText>
                <MudTextField @bind-Value="model.Email"
                              For="@(() => model.Email)"
                              Immediate="true"
                              Required="true"
                              Label="Email"
                              InputType="InputType.Email"
                              Placeholder="Your email adress for contact" />


                <MudTextField @bind-Value="model.Name"
                              For="@(() => model.Name)"
                              Immediate="true"
                              Required="true"
                              Label="Name"
                              InputType="InputType.Text"
                              Placeholder="How you wanna be called?" />
            </MudCardContent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Outlined" Color="Color.Warning">Cancel</MudButton>
        <MudSpacer />
        <MudButton Color="Color.Success" OnClick="RegisterUser" EndIcon="@Icons.Material.Filled.PersonAdd" Variant="Variant.Outlined">Register</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public string? QuickUserLogin { get; set; } = string.Empty;

    MudForm? form;
    ModelFluentValidator registerValidator = new ModelFluentValidator();
    UserRegisterModel model = new UserRegisterModel();
    bool userExists = false;

    UserData createdUser = new UserData();


    void Cancel() => MudDialog.Cancel();
    protected override void OnInitialized()
    {
        if (QuickUserLogin != null && QuickUserLogin.Length > 0)
        {
            model.Login = QuickUserLogin;
            model.Name = QuickUserLogin;

            if (form != null)
                form.Validate();
        }

        base.OnInitialized();
    }

    private async Task RegisterUser()
    {
        await form.Validate();
        if (!form.IsValid) return;

        UserData registeredUser = await DbHandler.GetUser(model.Login);
        if (registeredUser != null)
        {
            userExists = true;
            return;
        }

        userExists = false;
        createdUser.SetRegisterData(model.Login, model.Password, model.Email, model.Name);

        MudDialog.Close(DialogResult.Ok<UserData>(createdUser));
    }

    private class UserRegisterModel
    {
        public string Login { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string PasswordRepeated { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="UserRegisterModel"></typeparam>
    private class ModelFluentValidator : AbstractValidator<UserRegisterModel>
    {
        public ModelFluentValidator()
        {
            RuleFor(m => m.Login)
                .NotEmpty().WithMessage("Login cannot be empty")
                .MinimumLength(2).WithMessage("Login length must be at least 2.")
                .MaximumLength(30).WithMessage("Login length must not exceed 30.");

            RuleFor(m => m.Name)
                .NotEmpty().WithMessage("Name cannot be empty")
                .MinimumLength(2).WithMessage("Name length must be at least 2.")
                .MaximumLength(30).WithMessage("Name length must not exceed 30.");

            RuleFor(m => m.Password).NotEmpty().WithMessage("Password cannot be empty")
                .MinimumLength(8).WithMessage("Password length must be at least 8.")
                .MaximumLength(50).WithMessage("Password length must not exceed 50.")
                .Matches(@"[A-Z]+").WithMessage("Password must contain at least one uppercase letter.")
                .Matches(@"[a-z]+").WithMessage("Password must contain at least one lowercase letter.")
                .Matches(@"[0-9]+").WithMessage("Password must contain at least one number.")
                .Matches(@"[\!\.@#\-_]+").WithMessage("Password must contain at least one special character ( ! . @ # - _ ).");

            RuleFor(m => m.PasswordRepeated)
                .Equal(m => m.Password).WithMessage("Repeated password must equal password");

            RuleFor(m => m.Email)
                .EmailAddress().WithMessage("Provide correct email adress");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserRegisterModel>.CreateWithOptions((UserRegisterModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}