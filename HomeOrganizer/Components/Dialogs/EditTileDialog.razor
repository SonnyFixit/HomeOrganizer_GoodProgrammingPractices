@using HomeOrganizer.Common;
@using HomeOrganizer.Models.Bases;
@using HomeOrganizer.Models.Features;
@using FluentValidation
@using HomeOrganizer.Models.User;
@using MudBlazor.Utilities;

<MudDialog DefaultFocus="DefaultFocus.FirstChild">
    <DialogContent>
        <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudTextField @bind-Value="model.Name"
                              For="@(() => model.Name)"
                              Immediate="true"
                              Label="Name"
                              Placeholder=@Feature.TileData.UserGivenName />

                <MudTextField @bind-Value="model.Description"
                              For="@(() => model.Description)"
                              Immediate="true"
                              Label="Description"
                              Class="pt-3"
                              Lines="3"
                              Placeholder=@Feature.TileData.UserGivenDescription />

            </MudCardContent>

            <MudCardContent>

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudForm Model="@model" Validation="@(orderValidator.ValidateValue)">
                            <MudSelect FullWidth="false" T="string" DisableUnderLine="true"
                                       Label="Icon"
                                       AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Icon" Immediate="true"
                                       For="@(() => model.Icon)" Class="pt-3 selectIcon mx-0">
                                @foreach (var icon in Constants.TileIcons.Values)
                                {
                                    <MudSelectItem Value="@icon">
                                        <MudIcon Icon="@icon" Size="Size.Large" />
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudForm>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="px-12 py-6" Elevation="0">
                            <div style="font-size:14px; font-family: 'Roboto','Helvetica','Arial','sans-serif'; font-weight;"> Color </div>
                            <div class="mud-width-full rounded py-4" style="@($"background-color:{model.Color}; cursor:pointer; ")" @onclick="@TogglePalette"></div>
                            <MudPopover Open="colorPaletteOpen" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                                <MudForm Model="@model">
                                    <MudColorPicker PickerVariant="PickerVariant.Static"
                                                    SpectrumIcon="@Icons.Material.Filled.Star"
                                                    DisableAlpha="true" DisableInputs="true" DisableModeSwitch="true" DisablePreview="true" DisableToolbar="true" DisableSliders="true"
                                                    ColorPickerView="ColorPickerView.Palette"
                                                    Palette="@Constants.TileColorPalettes[UseDarkTheme]"
                                                    For="@(() => model.Color)" @bind-Value="model.Color" />
                                </MudForm>
                            </MudPopover>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudCardContent>


        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Outlined" Color="Color.Warning">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="EditTile" EndIcon="@Icons.Material.Filled.Upgrade" Variant="Variant.Outlined">Update</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public FeatureBase? Feature { get; set; }
    [Parameter]
    public bool UseDarkTheme { get; set; }

    private bool colorPaletteOpen = false;

    MudForm? form;
    ModelFluentValidator orderValidator = new ModelFluentValidator();
    UserPartFeatureData model = new UserPartFeatureData();

    protected override void OnInitialized()
    {
        if (Feature == null)
            MudDialog.Close(DialogResult.Cancel());

        model.Icon = Feature.TileData.Icon;
        model.Color = Constants.TileColorPalettes[UseDarkTheme].ElementAt(Feature.TileData.ColorIndex);
        model.Description = Feature.TileData.UserGivenDescription;
        model.Name = Feature.TileData.UserGivenName;
    }

    private class UserPartFeatureData
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = MudBlazor.Icons.Material.Filled.QuestionMark;
        public MudColor Color { get; set; } = Constants.TileColorPalettes[false].ElementAt(0);
    }

    private void TogglePalette()
    {
        colorPaletteOpen = !colorPaletteOpen;
    }


    void Cancel() => MudDialog.Cancel();

    private async Task EditTile()
    {
        await form.Validate();
        if (!form.IsValid) return;

        Feature.TileData.UserGivenName = model.Name;
        Feature.TileData.UserGivenDescription = CheckDescription(model.Description);
        Feature.TileData.Icon = model.Icon;
        Feature.TileData.ColorIndex = Array.IndexOf(Constants.TileColorPalettes[UseDarkTheme], model.Color);
        Feature.FeatureData.IsUsed = true;

        MudDialog.Close(DialogResult.Ok<FeatureBase>(Feature));
    }

    private string CheckDescription(string description)
    {
        if (description.Length <= 30) return description;
        string newDescription = string.Empty;

        for (int i = 0; i < description.Length; i += 30)
        {
            int maxRight = i + 30;
            if (i + 30 > description.Length)
            {
                maxRight = description.Length;
            }

            string substring = description[i..maxRight];
            newDescription += substring;
            if (!substring.Contains(' '))
                newDescription += " ";
        }

        return newDescription;
    }




    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="UserPartFeatureData"></typeparam>
    private class ModelFluentValidator : AbstractValidator<UserPartFeatureData>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 20);

            RuleFor(x => x.Description)
                .Length(0, 100);

            RuleFor(x => x.Icon)
                .NotEmpty()
                .Must(x => Constants.TileIcons.Values.Contains(x));
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserPartFeatureData>.CreateWithOptions((UserPartFeatureData)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}