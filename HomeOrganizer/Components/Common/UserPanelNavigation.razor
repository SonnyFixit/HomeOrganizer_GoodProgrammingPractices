@using HomeOrganizer.Common;
@using HomeOrganizer.Components.Dialogs;
@using HomeOrganizer.Models.Communication;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;
@using System.Net.Mail;
@using System.Net;

@inject UserService userService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager


<!-- User settings panel layout -->
<MudPaper Class="d-flex align-content-space-between flex-wrap flex-grow-1" Width="100%" Height="100%" Elevation="0">
    <MudList @bind-SelectedValue="@CurrentPanel" Clickable="true" SelectedItemChanged="HandleItemChanged">
        <MudListSubheader>
            Settings
        </MudListSubheader>
        <MudListItem Icon="@Icons.Material.Filled.EditNote" Text="Details" Value="1" />
        <MudListItem Icon="@Icons.Material.Filled.Image" Text="Avatar" Value="2" />
        <MudListItem Icon="@Icons.Material.Filled.Lock" Text="Password" Value="3" />
        <MudListItem Icon="@Icons.Material.Filled.Notifications" Text="Notifications" Value="4" />
        <MudListItem Icon="@Icons.Material.Filled.FormatListNumbered" Text="Features" Value="5" />
    </MudList>

    <!-- Button to change the side of the panel -->
    <MudStack Justify="Justify.Center" Row="true" Style="width: 100%; height: 40px;">

        @if (IsRightSide)
        {
            <MudButton Style="width:100%" OnClick="ChangeSide" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Success" aria-label="Move left" />
        }
        else
        {
            <MudButton Style="width:100%" OnClick="ChangeSide" StartIcon="@Icons.Material.Filled.ArrowForward" Color="Color.Success" aria-label="Move right" />
        }
    </MudStack>
</MudPaper>

@code {

    // Properties to control the behavior and state of the component.
    [Parameter]
    public bool IsRightSide { get; set; } = false;

    [Parameter]
    public object CurrentPanel { get; set; } = 1;

    [Parameter]
    public EventCallback<UserPanelNavigationData> OnNavigationChanged { get; set; }

    [Parameter]
    public EventCallback OnSideChange { get; set; }

    /// <summary>
    /// Handles the change of selected item in the settings list.
    /// </summary>
    /// <param name="selectedItem">The selected item.</param>
    private async Task HandleItemChanged(MudListItem selectedItem)
    {
        if (selectedItem == null) return;
        await OnNavigationChanged.InvokeAsync(new UserPanelNavigationData(selectedItem.Text, selectedItem.Value));
    }

    /// <summary>
    /// Triggers a side change of the panel.
    /// </summary>
    private async Task ChangeSide()
    {
        await OnSideChange.InvokeAsync();
    }
}