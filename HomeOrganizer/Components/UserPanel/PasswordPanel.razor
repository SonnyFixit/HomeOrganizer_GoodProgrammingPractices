@using FluentValidation;
@using HomeOrganizer.Models.User;
@using MyWebsiteBlazor.Data.Database;

@inject UserService userService
@inject ISnackbar snackbarService

@if (User == null)
{
    <HomeOrganizer.Components.Errors.NoUserPanelError />
    return;
}

<MudStack Row="false" Justify="Justify.SpaceBetween" Style="height:60%">
    <MudPaper Elevation="0">
        <MudText Typo="Typo.h5">
            Password
        </MudText>
    </MudPaper>
    <MudPaper Elevation="0">
        <MudForm Model="@model" @ref="@form" Validation="@(changePasswordValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>

                @if (!goodCurrentPassword)
                {
                    <MudText Typo="Typo.caption" Color="Color.Error">
                        Wrong current password!
                    </MudText>
                }

                <MudTextField @bind-Value="model.CurrentPassword"
                              For="@(() => model.CurrentPassword)"
                              Immediate="true"
                              Required="true"
                              Label="Current password"
                              Placeholder="Current password"
                              InputType="@passwordsVisibilities["Current"].InputType"
                              Adornment="Adornment.End" AdornmentIcon="@passwordsVisibilities["Current"].Icon"
                              OnAdornmentClick="@passwordsVisibilities["Current"].ChangeVisibility" AdornmentAriaLabel="Show Password" />

                <MudTextField @bind-Value="model.NewPassword"
                              For="@(() => model.NewPassword)"
                              Immediate="true"
                              Required="true"
                              Label="New password"
                              Placeholder="New password"
                              Class="mt-5"
                              InputType="@passwordsVisibilities["New"].InputType"
                              Adornment="Adornment.End" AdornmentIcon="@passwordsVisibilities["New"].Icon"
                              OnAdornmentClick="@passwordsVisibilities["New"].ChangeVisibility" AdornmentAriaLabel="Show Password" />

                <MudTextField @bind-Value="model.NewPasswordRepeated"
                              For="@(() => model.NewPasswordRepeated)"
                              Immediate="true"
                              Required="true"
                              Label="New password repeated"
                              Placeholder="Reapeat new password"
                              Class="mt-5"
                              InputType="@passwordsVisibilities["NewRepeat"].InputType"
                              Adornment="Adornment.End" AdornmentIcon="@passwordsVisibilities["NewRepeat"].Icon"
                              OnAdornmentClick="@passwordsVisibilities["NewRepeat"].ChangeVisibility" AdornmentAriaLabel="Show Password" />

            </MudCardContent>
        </MudForm>
    </MudPaper>
    <MudStack Class="mt-5" Row="true" Justify="Justify.Center">
        <MudButton OnClick="ChangePassword" EndIcon="@Icons.Material.Filled.PublishedWithChanges" IconColor="Color.Success" Variant="Variant.Outlined" Color="Color.Success">
            Change password
        </MudButton>
    </MudStack>
</MudStack>

@code {
    [Parameter]
    public UserData? User { get; set; } = null;
    MudForm? form;
    ModelFluentValidator changePasswordValidator = new ModelFluentValidator();
    ChangePasswordModel model = new ChangePasswordModel();

    bool goodCurrentPassword = true;

    private Dictionary<string, PasswordVisibility> passwordsVisibilities = new Dictionary<string, PasswordVisibility>()
    {
        {"Current", new PasswordVisibility()},
        {"New", new PasswordVisibility()},
        {"NewRepeat", new PasswordVisibility()}
    };

    private async Task ChangePassword()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            return;
        }

        goodCurrentPassword = User.Credentials.CheckPassword(model.CurrentPassword);

        if (!goodCurrentPassword)
        {
            return;
        }

        User.ResetPassword(model.NewPassword);
        var response = await DbHandler.UpdateUser(User);

        snackbarService.Clear();
        snackbarService.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (response.Status)
        {
            await EmailService.SendChangedPasswordNotification(User.Email, User.Credentials.Login);
            snackbarService.Add("Password successfully changed!", MudBlazor.Severity.Success);
            model = new ChangePasswordModel();
        }
        else
        {
            snackbarService.Add("Couldn't change your password, try again later...", MudBlazor.Severity.Error);
        }
    }

    private class ChangePasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string NewPasswordRepeated { get; set; } = string.Empty;
    }

    private class ModelFluentValidator : AbstractValidator<ChangePasswordModel>
    {
        public ModelFluentValidator()
        {
            RuleFor(m => m.CurrentPassword)
                .NotEmpty().WithMessage("Provide your current password");

            RuleFor(m => m.NewPassword).NotEmpty().WithMessage("Password cannot be empty")
                .MinimumLength(8).WithMessage("Password length must be at least 8.")
                .MaximumLength(50).WithMessage("Password length must not exceed 50.")
                .Matches(@"[A-Z]+").WithMessage("Password must contain at least one uppercase letter.")
                .Matches(@"[a-z]+").WithMessage("Password must contain at least one lowercase letter.")
                .Matches(@"[0-9]+").WithMessage("Password must contain at least one number.")
                .Matches(@"[\!\.@#\-_]+").WithMessage("Password must contain at least one special character ( ! . @ # - _ ).");

            RuleFor(m => m.NewPasswordRepeated)
                .Equal(m => m.NewPassword).WithMessage("Repeated password must equal new password");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ChangePasswordModel>.CreateWithOptions((ChangePasswordModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}